Index: app/src/main/java/com/example/saranggujrati/ui/fragment/HomeFragment.kt
IDEA additional info:
Subsystem: com.intellij.openapi.diff.impl.patch.BaseRevisionTextPatchEP
<+>package com.example.saranggujrati.ui.fragment\r\n\r\nimport android.content.Intent\r\nimport android.os.Bundle\r\nimport android.os.Handler\r\nimport android.os.Looper\r\nimport android.util.Log\r\nimport android.view.*\r\nimport androidx.lifecycle.Observer\r\nimport androidx.recyclerview.widget.*\r\nimport com.example.saranggujrati.AppClass\r\nimport com.example.saranggujrati.R\r\nimport com.example.saranggujrati.adapter.CategoryListAdapter\r\nimport com.example.saranggujrati.adapter.FeaturedListAdapter\r\nimport com.example.saranggujrati.adapter.OnDemandListAdapter\r\nimport com.example.saranggujrati.adapter.TopCitiesAdapter\r\nimport com.example.saranggujrati.databinding.FragmentHomeBinding\r\nimport com.example.saranggujrati.model.*\r\nimport com.example.saranggujrati.model.onDemand.OnDemandData\r\nimport com.example.saranggujrati.ui.SavedPrefrence\r\nimport com.example.saranggujrati.ui.activity.ActivityCityCatBlogDetail\r\nimport com.example.saranggujrati.ui.activity.MainActivity\r\nimport com.example.saranggujrati.ui.activity.YouTubeActivity\r\nimport com.example.saranggujrati.ui.isOnline\r\nimport com.example.saranggujrati.ui.viewModel.HomeViewModel\r\nimport com.example.saranggujrati.ui.visible\r\nimport com.example.saranggujrati.webservice.Resource\r\nimport com.google.android.material.snackbar.Snackbar\r\nimport com.performly.ext.obtainViewModel\r\nimport kotlin.collections.ArrayList\r\n\r\n\r\nclass HomeFragment : BaseFragment<HomeViewModel>(), View.OnClickListener {\r\n\r\n    private lateinit var mActivity: MainActivity\r\n    private lateinit var binding: FragmentHomeBinding\r\n\r\n    lateinit var topCitiesAdapter: TopCitiesAdapter\r\n    private var topCitiesList = ArrayList<CityCatageoryChild>()\r\n\r\n    lateinit var featureAdapter: FeaturedListAdapter\r\n    lateinit var onDemandAdapter: OnDemandListAdapter\r\n    private var featureList = ArrayList<FeatureData>()\r\n    private var onDemandList = ArrayList<OnDemandData>()\r\n\r\n    lateinit var categoryAdapter: CategoryListAdapter\r\n    private var categoryList = ArrayList<CityCatageoryChild>()\r\n\r\n    lateinit var mLayoutManager: RecyclerView.LayoutManager\r\n    lateinit var mLayoutManagerHorizontal: RecyclerView.LayoutManager\r\n\r\n    override fun getLayoutView(inflater: LayoutInflater, container: ViewGroup?): View? {\r\n        binding = FragmentHomeBinding.inflate(inflater, container, false)\r\n        return binding.root\r\n    }\r\n\r\n    override fun initializeViewModel(): HomeViewModel {\r\n        return obtainViewModel(HomeViewModel::class.java)\r\n    }\r\n\r\n    override fun setUpChildUI(savedInstanceState: Bundle?) {\r\n        mActivity = (activity as MainActivity)\r\n        mActivity.toolbar.title = getString(R.string.app_name)\r\n        mActivity.enableViews(false)\r\n        setAdapter()\r\n\r\n        attachListeners()\r\n\r\n        setRVLayoutManager()\r\n\r\n        callApi()\r\n\r\n        if (SavedPrefrence.is_Guest) {\r\n            setHasOptionsMenu(false)\r\n        } else {\r\n            setHasOptionsMenu(true)\r\n        }\r\n    }\r\n\r\n    override fun onCreateOptionsMenu(menu: Menu, inflater: MenuInflater) {\r\n        inflater.inflate(R.menu.main_menu, menu);\r\n        super.onCreateOptionsMenu(menu, inflater)\r\n    }\r\n\r\n    private fun setAdapter() {\r\n        topCitiesAdapter = TopCitiesAdapter(topCitiesList)\r\n        binding.rvTopCities.recyclerview.adapter = topCitiesAdapter\r\n\r\n        featureAdapter = FeaturedListAdapter(featureList)\r\n        binding.rvFeaturedStories.recyclerview.adapter = featureAdapter\r\n\r\n        onDemandAdapter = OnDemandListAdapter(onDemandList)\r\n        val snapHelper: SnapHelper = PagerSnapHelper()\r\n        snapHelper.attachToRecyclerView(binding.rvOnDemand.recyclerview)\r\n        onDemandAdapter.adapterListener = object : OnDemandListAdapter.AdapterListener {\r\n            override fun onClick(view: View, position: Int) {\r\n                val i = Intent(requireContext(), YouTubeActivity::class.java)\r\n                i.putExtra(\"url\", onDemandList[position].url)\r\n                i.putExtra(\"videoName\", onDemandList[position].title)\r\n                startActivity(i)\r\n            }\r\n        }\r\n        val speedScroll = 3000L\r\n        val handler = Handler(Looper.getMainLooper())\r\n        val runnable: Runnable = object : Runnable {\r\n            var count = 0\r\n            override fun run() {\r\n                if (count < onDemandList.size) count += 1 else count = 0\r\n                binding.rvOnDemand.recyclerview.smoothScrollToPosition(count)\r\n                handler.postDelayed(this, speedScroll)\r\n            }\r\n        }\r\n        handler.postDelayed(runnable, speedScroll)\r\n\r\n        binding.rvOnDemand.recyclerview.adapter = onDemandAdapter\r\n\r\n        categoryAdapter = CategoryListAdapter(categoryList)\r\n        binding.rvTopCategory.recyclerview.adapter = categoryAdapter\r\n\r\n        categoryAdapter.adapterListener = object : CategoryListAdapter.AdapterListener {\r\n            override fun onClick(view: View, position: Int) {\r\n                if (view.id == R.id.llMain) {\r\n                    val data = categoryList[position]\r\n                    ActivityCityCatBlogDetail.startActivity(\r\n                        activity!!, data.parent_id, data.id.toString(), data.name\r\n                    )\r\n                }\r\n            }\r\n        }\r\n\r\n        featureAdapter.adapterListener = object : FeaturedListAdapter.AdapterListener {\r\n            override fun onClick(view: View, position: Int) {\r\n                if (view.id == R.id.llMain) {\r\n                    val b = Bundle()\r\n                    b.putInt(\"position\", position)\r\n                    mActivity.pushFragment(FragmentFeatureBlog(b))\r\n                }\r\n            }\r\n\r\n        }\r\n        topCitiesAdapter.adapterListener = object : TopCitiesAdapter.AdapterListener {\r\n            override fun onClick(view: View, position: Int) {\r\n                if (view.id == R.id.tvCity) {\r\n                    val data = topCitiesList[position]\r\n                    ActivityCityCatBlogDetail.startActivity(\r\n                        activity!!, data.parent_id, data.id.toString(), data.name\r\n                    )\r\n                }\r\n            }\r\n        }\r\n    }\r\n\r\n    private fun setRVLayoutManager() {\r\n        mLayoutManager = LinearLayoutManager(AppClass.appContext)\r\n        mLayoutManagerHorizontal = LinearLayoutManager(AppClass.appContext)\r\n\r\n        binding.rvTopCities.recyclerview.layoutManager = mLayoutManager\r\n        binding.rvTopCities.recyclerview.setHasFixedSize(true)\r\n        binding.rvTopCities.recyclerview.layoutManager = GridLayoutManager(AppClass.appContext, 3)\r\n\r\n        binding.rvFeaturedStories.recyclerview.layoutManager = mLayoutManagerHorizontal\r\n        binding.rvFeaturedStories.recyclerview.setHasFixedSize(true)\r\n        binding.rvFeaturedStories.recyclerview.layoutManager =\r\n            LinearLayoutManager(AppClass.appContext, LinearLayoutManager.HORIZONTAL, false)\r\n\r\n//        Live temple\r\n        binding.rvOnDemand.recyclerview.layoutManager = mLayoutManagerHorizontal\r\n        binding.rvOnDemand.recyclerview.setHasFixedSize(true)\r\n        binding.rvOnDemand.recyclerview.layoutManager =\r\n            LinearLayoutManager(AppClass.appContext, LinearLayoutManager.HORIZONTAL, false)\r\n\r\n        binding.rvTopCategory.recyclerview.layoutManager = mLayoutManager\r\n        binding.rvTopCategory.recyclerview.setHasFixedSize(true)\r\n        binding.rvTopCategory.recyclerview.layoutManager = GridLayoutManager(AppClass.appContext, 3)\r\n\r\n        (mLayoutManager as LinearLayoutManager).orientation = RecyclerView.VERTICAL\r\n        (mLayoutManagerHorizontal as LinearLayoutManager).orientation = RecyclerView.HORIZONTAL\r\n    }\r\n\r\n    private fun attachListeners() {\r\n        binding.llLiveNews.setOnClickListener(this)\r\n        binding.llallGujNews.setOnClickListener(this)\r\n        binding.llLatestNews.setOnClickListener(this)\r\n        binding.tvLiveTempleDarshan.setOnClickListener(this)\r\n\r\n        binding.swipeRefresh.setOnRefreshListener {\r\n            callApi()\r\n        }\r\n    }\r\n\r\n    private fun callApi() {\r\n        getFeaturedListData()\r\n\r\n        getCity()\r\n\r\n        getCategory()\r\n\r\n    }\r\n\r\n    private fun getCity() {\r\n        viewModel.gettTopCitiesCategories()\r\n        setupObserversTopCities()\r\n    }\r\n    //Top Cities\r\n\r\n    private fun setupObserversTopCities() {\r\n        viewModel.topCitiesResponse.observe(this, Observer {\r\n            when (it) {\r\n                is Resource.Loading -> {\r\n                    binding.rvTopCities.progressbar.visible(true)\r\n                }\r\n\r\n                is Resource.Success -> {\r\n                    topCitiesList.clear()\r\n                    binding.swipeRefresh.isRefreshing = false\r\n                    if (it.value.status) {\r\n                        binding.rvTopCities.progressbar.visible(false)\r\n                        getTopCitiesList(it.value)\r\n                    } else {\r\n                        binding.rvTopCities.progressbar.visible(false)\r\n                        Snackbar.make(binding.layout, it.value.message, Snackbar.LENGTH_LONG).show()\r\n                    }\r\n\r\n                }\r\n                is Resource.Failure -> {\r\n                    binding.rvTopCities.progressbar.visible(false)\r\n                    when {\r\n                        it.isNetworkError -> {\r\n                            if (!isOnline(AppClass.appContext)) {\r\n                                Snackbar.make(\r\n                                    binding.layout,\r\n                                    resources.getString(R.string.check_internet),\r\n                                    Snackbar.LENGTH_LONG\r\n                                ).show()\r\n                            }\r\n                        }\r\n                        else -> {\r\n                            Snackbar.make(binding.layout, it.value.message, Snackbar.LENGTH_LONG)\r\n                                .show()\r\n                        }\r\n                    }\r\n                }\r\n            }\r\n\r\n        })\r\n    }\r\n\r\n    private fun getTopCitiesList(response: CitCategoryListResponse) {\r\n        if (response.data.isEmpty()) {\r\n            binding.rvTopCities.tvNoData.visibility = View.VISIBLE\r\n            binding.rvTopCities.recyclerview.visibility = View.GONE\r\n        } else {\r\n            response?.let { res ->\r\n                res.data?.let { data ->\r\n                    data.find { it.id == 18 }?.let { cateData ->\r\n                        cateData.child?.let {\r\n                            topCitiesList.addAll(it)\r\n                            topCitiesAdapter.notifyDataSetChanged()\r\n                        }\r\n                    }\r\n                }\r\n            }\r\n        }\r\n    }\r\n\r\n    //Feature List\r\n\r\n    private fun getFeaturedListData() {\r\n        setupObserversFeatureList()\r\n\r\n        viewModel.gettFeatureList()\r\n\r\n        viewModel.getOnDemandList()\r\n    }\r\n\r\n    private fun setupObserversFeatureList() {\r\n        viewModel.featureListResponse.observe(this, Observer {\r\n            when (it) {\r\n                is Resource.Loading -> {\r\n                    binding.rvFeaturedStories.progressbar.visible(true)\r\n                }\r\n\r\n                is Resource.Success -> {\r\n                    featureList.clear()\r\n                    binding.swipeRefresh.isRefreshing = false\r\n                    if (it.value.status) {\r\n                        binding.rvFeaturedStories.progressbar.visible(false)\r\n                    } else {\r\n                        binding.rvFeaturedStories.progressbar.visible(false)\r\n                        Snackbar.make(binding.layout, it.value.message, Snackbar.LENGTH_LONG).show()\r\n                    }\r\n                    getFeatureList(it.value)\r\n                }\r\n                is Resource.Failure -> {\r\n                    binding.rvFeaturedStories.progressbar.visible(false)\r\n                    setFeatureStoryLblVisisbility()\r\n                    when {\r\n                        it.isNetworkError -> {\r\n                            if (!isOnline(AppClass.appContext)) {\r\n                                Snackbar.make(\r\n                                    binding.layout,\r\n                                    resources.getString(R.string.check_internet),\r\n                                    Snackbar.LENGTH_LONG\r\n                                ).show()\r\n                            }\r\n                        }\r\n                        else -> {\r\n                            Snackbar.make(binding.layout, it.value.message, Snackbar.LENGTH_LONG)\r\n                                .show()\r\n                        }\r\n\r\n\r\n                    }\r\n\r\n\r\n                }\r\n            }\r\n\r\n        })\r\n\r\n        viewModel.onDemandList.observe(this, Observer {\r\n            when (it) {\r\n                is Resource.Loading -> {\r\n                    binding.rvOnDemand.progressbar.visible(true)\r\n                }\r\n\r\n                is Resource.Success -> {\r\n                    onDemandList.clear()\r\n                    binding.swipeRefresh.isRefreshing = false\r\n                    if (it.value.status) {\r\n                        binding.rvOnDemand.progressbar.visible(false)\r\n                        it.value.data.data?.let { it1 -> onDemandList.addAll(it1) }\r\n                        onDemandLblVisibility()\r\n                        onDemandAdapter.notifyDataSetChanged()\r\n                    } else {\r\n                        binding.rvOnDemand.progressbar.visible(false)\r\n                        Snackbar.make(binding.layout, it.value.message, Snackbar.LENGTH_LONG).show()\r\n                    }\r\n                }\r\n\r\n                is Resource.Failure -> {\r\n                    onDemandLblVisibility()\r\n                    binding.rvOnDemand.progressbar.visible(false)\r\n                    when {\r\n                        it.isNetworkError -> {\r\n                            if (!isOnline(AppClass.appContext)) {\r\n                                Snackbar.make(\r\n                                    binding.layout,\r\n                                    resources.getString(R.string.check_internet),\r\n                                    Snackbar.LENGTH_LONG\r\n                                ).show()\r\n                            }\r\n                        }\r\n                        else -> {\r\n                            Snackbar.make(binding.layout, it.value.message, Snackbar.LENGTH_LONG)\r\n                                .show()\r\n\r\n                        }\r\n\r\n\r\n                    }\r\n\r\n\r\n                }\r\n            }\r\n\r\n        })\r\n    }\r\n\r\n    private fun onDemandLblVisibility() {\r\n        binding.txtLblOnDemand.visible(onDemandList.isNotEmpty())\r\n    }\r\n\r\n    private fun getFeatureList(response: BlogFeatureList) {\r\n        if (response.data.isEmpty()) {\r\n            binding.rvFeaturedStories.tvNoData.visibility = View.VISIBLE\r\n            binding.rvFeaturedStories.recyclerview.visibility = View.GONE\r\n        } else {\r\n            featureList.addAll(response.data)\r\n            featureAdapter.notifyDataSetChanged()\r\n        }\r\n        setFeatureStoryLblVisisbility()\r\n    }\r\n\r\n    private fun setFeatureStoryLblVisisbility() {\r\n        binding.tvFeaturedStories.visible(featureList.isNotEmpty())\r\n    }\r\n\r\n    private fun getCategory() {\r\n        setupObserversTopCategory()\r\n        viewModel.gettTopCategories()\r\n    }\r\n\r\n    //Top Category\r\n    private fun setupObserversTopCategory() {\r\n        viewModel.topCategoryResponse.observe(this, Observer {\r\n            when (it) {\r\n                is Resource.Loading -> {\r\n                    binding.rvTopCategory.progressbar.visible(true)\r\n                }\r\n\r\n                is Resource.Success -> {\r\n                    categoryList.clear()\r\n                    binding.swipeRefresh.isRefreshing = false\r\n                    if (it.value.status) {\r\n                        binding.rvTopCategory.progressbar.visible(false)\r\n                        getTopCategoryList(it.value)\r\n                    } else {\r\n                        binding.rvTopCategory.progressbar.visible(false)\r\n                        Snackbar.make(binding.layout, it.value.message, Snackbar.LENGTH_LONG).show()\r\n                    }\r\n                }\r\n                is Resource.Failure -> {\r\n                    binding.rvTopCategory.progressbar.visible(false)\r\n                    when {\r\n                        it.isNetworkError -> {\r\n                            if (!isOnline(AppClass.appContext)) {\r\n                                Snackbar.make(\r\n                                    binding.layout,\r\n                                    resources.getString(R.string.check_internet),\r\n                                    Snackbar.LENGTH_LONG\r\n                                ).show()\r\n                            }\r\n                        }\r\n                        else -> {\r\n                            Snackbar.make(binding.layout, it.value.message, Snackbar.LENGTH_LONG)\r\n                                .show()\r\n                        }\r\n                    }\r\n                }\r\n            }\r\n        })\r\n    }\r\n\r\n    private fun getTopCategoryList(response: CitCategoryListResponse) {\r\n        if (response.data.isEmpty()) {\r\n            binding.rvTopCategory.tvNoData.visibility = View.VISIBLE\r\n            binding.rvTopCategory.recyclerview.visibility = View.GONE\r\n        } else {\r\n            response?.let { res ->\r\n                res.data?.let { data ->\r\n                    data.find { it.id == 21 }?.let { cateData ->\r\n                        cateData.child?.let {\r\n                            categoryList.addAll(it)\r\n                            categoryAdapter.notifyDataSetChanged()\r\n                        }\r\n                    }\r\n                }\r\n            }\r\n        }\r\n    }\r\n\r\n    override fun onOptionsItemSelected(item: MenuItem): Boolean {\r\n        when (item.itemId) {\r\n            R.id.logo -> mActivity.pushFragment(FragmentEditProfile())\r\n        }\r\n        return super.onOptionsItemSelected(item)\r\n    }\r\n\r\n    override fun onClick(p0: View?) {\r\n        when (p0) {\r\n            binding.llLiveNews -> mActivity.pushFragment(FragmentAllNewsChannel())\r\n            binding.llallGujNews -> mActivity.pushFragment(FragmentAllNewsPaper())\r\n            binding.llLatestNews -> mActivity.pushFragment(FragmentAllBlog())\r\n            binding.tvLiveTempleDarshan -> mActivity.pushFragment(\r\n                FragmentLiveTempleDarshanChannelList()\r\n            )\r\n        }\r\n    }\r\n\r\n}
Subsystem: com.intellij.openapi.diff.impl.patch.CharsetEP
<+>UTF-8
===================================================================
diff --git a/app/src/main/java/com/example/saranggujrati/ui/fragment/HomeFragment.kt b/app/src/main/java/com/example/saranggujrati/ui/fragment/HomeFragment.kt
--- a/app/src/main/java/com/example/saranggujrati/ui/fragment/HomeFragment.kt	(revision 68b224f26154a07dbf15a6a310d612e5b5fc02ef)
+++ b/app/src/main/java/com/example/saranggujrati/ui/fragment/HomeFragment.kt	(date 1649069607858)
@@ -183,6 +183,10 @@
         binding.llLatestNews.setOnClickListener(this)
         binding.tvLiveTempleDarshan.setOnClickListener(this)
 
+        binding.llLatestNews.setOnClickListener {
+
+        }
+
         binding.swipeRefresh.setOnRefreshListener {
             callApi()
         }
Index: app/src/main/java/com/example/saranggujrati/ui/activity/SplashScreenActivity.kt
IDEA additional info:
Subsystem: com.intellij.openapi.diff.impl.patch.BaseRevisionTextPatchEP
<+>package com.example.saranggujrati.ui.activity\r\n\r\nimport android.content.Intent\r\nimport android.os.Bundle\r\nimport android.os.Handler\r\nimport android.view.Window\r\nimport android.view.WindowManager\r\nimport androidx.appcompat.app.AppCompatActivity\r\nimport com.example.saranggujrati.AppClass\r\nimport com.example.saranggujrati.R\r\nimport com.example.saranggujrati.ui.SavedPrefrence\r\n\r\n\r\n@Suppress(\"DEPRECATION\")\r\nclass SplashScreenActivity : AppCompatActivity() {\r\n\r\n\r\n    override fun onCreate(savedInstanceState: Bundle?) {\r\n        super.onCreate(savedInstanceState)\r\n        this.requestWindowFeature(Window.FEATURE_NO_TITLE)\r\n        setContentView(R.layout.activity_splash)\r\n\r\n\r\n        // This is used to hide the status bar and make\r\n        // the splash screen as a full screen activity.\r\n        window.setFlags(\r\n            WindowManager.LayoutParams.FLAG_FULLSCREEN,\r\n            WindowManager.LayoutParams.FLAG_FULLSCREEN\r\n        )\r\n\r\n        // we used the postDelayed(Runnable, time) method\r\n        // to send a message with a delayed time.\r\n        Handler().postDelayed({\r\n            val intent = when {\r\n                SavedPrefrence.getUserId(AppClass.appContext) != \"\" -> {\r\n                    Intent(this, MainActivity::class.java)\r\n                }\r\n                SavedPrefrence.getIsGuest(this) == true -> {\r\n                    Intent(this, MainActivity::class.java)\r\n                }\r\n                else -> {\r\n                    Intent(this, LoginActivity::class.java)\r\n                }\r\n            }\r\n            startActivity(intent)\r\n            finish()\r\n        }, 3000) // 3000 is the delayed time in milliseconds.\r\n    }\r\n}\r\n\r\n
Subsystem: com.intellij.openapi.diff.impl.patch.CharsetEP
<+>UTF-8
===================================================================
diff --git a/app/src/main/java/com/example/saranggujrati/ui/activity/SplashScreenActivity.kt b/app/src/main/java/com/example/saranggujrati/ui/activity/SplashScreenActivity.kt
--- a/app/src/main/java/com/example/saranggujrati/ui/activity/SplashScreenActivity.kt	(revision 68b224f26154a07dbf15a6a310d612e5b5fc02ef)
+++ b/app/src/main/java/com/example/saranggujrati/ui/activity/SplashScreenActivity.kt	(date 1654672325997)
@@ -20,6 +20,7 @@
         this.requestWindowFeature(Window.FEATURE_NO_TITLE)
         setContentView(R.layout.activity_splash)
 
+        SavedPrefrence.getLoginFrom(this)
 
         // This is used to hide the status bar and make
         // the splash screen as a full screen activity.
Index: app/src/main/java/com/example/saranggujrati/webservice/RetrofitBuilder.kt
IDEA additional info:
Subsystem: com.intellij.openapi.diff.impl.patch.BaseRevisionTextPatchEP
<+>package com.example.retrofitcoroutineexample.data.api\r\n\r\nimport com.example.saranggujrati.AppClass\r\nimport com.example.saranggujrati.BuildConfig\r\nimport com.example.saranggujrati.model.rssFeed.RssFeed\r\nimport com.example.saranggujrati.ui.SavedPrefrence\r\nimport com.example.saranggujrati.webservice.ApiService\r\nimport com.example.saranggujrati.webservice.factory.QualifiedTypeConverterFactory\r\nimport com.github.muhrifqii.parserss.RSSFeedObject\r\nimport com.github.muhrifqii.parserss.retrofit.ParseRSSConverterFactory\r\nimport okhttp3.Authenticator\r\nimport okhttp3.OkHttpClient\r\nimport okhttp3.logging.HttpLoggingInterceptor\r\nimport retrofit2.Retrofit\r\nimport retrofit2.converter.gson.GsonConverterFactory\r\nimport retrofit2.converter.simplexml.SimpleXmlConverterFactory\r\n\r\n\r\nimport java.util.concurrent.TimeUnit\r\n\r\n\r\nobject RetrofitBuilder {\r\n\r\n    private const val BASE_URL = \"https://sarangnews.app/gujarati/api/\"\r\n\r\n\r\n    //print responce in json format\r\n    private fun getRetrofitClient(authenticator: Authenticator? = null): OkHttpClient {\r\n        return OkHttpClient.Builder()\r\n            .addInterceptor { chain ->\r\n                chain.proceed(chain.request().newBuilder().also {\r\n                    if (SavedPrefrence.getApiToken(AppClass.appContext) != \"\") {\r\n                        it.addHeader(\r\n                            \"Authorization\",\r\n                            \"Bearer ${SavedPrefrence.getApiToken(AppClass.appContext)}\"\r\n                        )\r\n                    }\r\n                }.build())\r\n            }\r\n            .also { client ->\r\n                authenticator?.let { client.authenticator(it) }\r\n                if (BuildConfig.DEBUG) {\r\n                    val logging = HttpLoggingInterceptor()\r\n                    logging.setLevel(HttpLoggingInterceptor.Level.BODY)\r\n                    client.addInterceptor(logging)\r\n                }\r\n            }.connectTimeout(60, TimeUnit.SECONDS).build()\r\n    }\r\n\r\n\r\n    //create retrofit instance\r\n    private fun getRetrofit(): Retrofit {\r\n\r\n        return Retrofit.Builder()\r\n            .baseUrl(BASE_URL)\r\n            .addConverterFactory(\r\n                QualifiedTypeConverterFactory(GsonConverterFactory.create(),SimpleXmlConverterFactory.create())\r\n            )\r\n            .addConverterFactory(GsonConverterFactory.create())\r\n            .client(getRetrofitClient())\r\n            .build()\r\n\r\n    }\r\n\r\n    val apiService: ApiService = getRetrofit().create(ApiService::class.java)\r\n}\r\n\r\n\r\n\r\n\r\n\r\n
Subsystem: com.intellij.openapi.diff.impl.patch.CharsetEP
<+>UTF-8
===================================================================
diff --git a/app/src/main/java/com/example/saranggujrati/webservice/RetrofitBuilder.kt b/app/src/main/java/com/example/saranggujrati/webservice/RetrofitBuilder.kt
--- a/app/src/main/java/com/example/saranggujrati/webservice/RetrofitBuilder.kt	(revision 68b224f26154a07dbf15a6a310d612e5b5fc02ef)
+++ b/app/src/main/java/com/example/saranggujrati/webservice/RetrofitBuilder.kt	(date 1652442077002)
@@ -1,5 +1,6 @@
 package com.example.retrofitcoroutineexample.data.api
 
+import android.content.Context
 import com.example.saranggujrati.AppClass
 import com.example.saranggujrati.BuildConfig
 import com.example.saranggujrati.model.rssFeed.RssFeed
Index: app/src/main/java/com/example/saranggujrati/ui/activity/BaseActicvity.kt
IDEA additional info:
Subsystem: com.intellij.openapi.diff.impl.patch.BaseRevisionTextPatchEP
<+>package com.example.saranggujrati.ui.activity\r\n\r\nimport android.app.Activity\r\nimport android.os.Bundle\r\nimport android.view.View\r\nimport android.view.Window\r\nimport androidx.appcompat.app.ActionBarDrawerToggle\r\nimport androidx.appcompat.app.AppCompatActivity\r\nimport androidx.core.view.GravityCompat\r\nimport androidx.fragment.app.FragmentManager\r\nimport androidx.lifecycle.ViewModelProvider\r\nimport com.example.retrofitcoroutineexample.data.api.RetrofitBuilder\r\nimport com.example.saranggujrati.R\r\nimport com.example.saranggujrati.ViewModelFactory\r\nimport com.example.saranggujrati.databinding.ActivityBaseBinding\r\nimport com.example.saranggujrati.ui.viewModel.BaseViewModel\r\n\r\nabstract class BaseActicvity <VM : BaseViewModel> : AppCompatActivity() {\r\n    lateinit var baseBinding: ActivityBaseBinding\r\n    lateinit var viewModel: VM\r\n\r\n\r\n    override fun onCreate(savedInstanceState: Bundle?) {\r\n        super.onCreate(savedInstanceState)\r\n        this.requestWindowFeature(Window.FEATURE_NO_TITLE);\r\n\r\n        /* if (activity is ActionBarActivity<*>) {\r\n             setContentView(getBaseLayoutView())\r\n         } else {*/\r\n            baseBinding = ActivityBaseBinding.inflate(layoutInflater)\r\n            setContentView(baseBinding.root)\r\n\r\n            baseBinding.aBaseLayoutContent.addView(getBaseLayoutView())\r\n\r\n            //initialize view model\r\n            /*viewModel= ViewModelProvider(this, ViewModelFactory(RetrofitBuilder.apiService))\r\n                .get(initializeViewModel())*/\r\n\r\n            viewModel = initializeViewModel()\r\n        //}\r\n\r\n        setUpChildUI(savedInstanceState)\r\n    }\r\n\r\n    protected abstract fun getBaseLayoutView(): View?\r\n\r\n    protected abstract fun initializeViewModel(): VM\r\n\r\n    protected abstract fun setUpChildUI(savedInstanceState: Bundle?)\r\n\r\n\r\n}
Subsystem: com.intellij.openapi.diff.impl.patch.CharsetEP
<+>UTF-8
===================================================================
diff --git a/app/src/main/java/com/example/saranggujrati/ui/activity/BaseActicvity.kt b/app/src/main/java/com/example/saranggujrati/ui/activity/BaseActicvity.kt
--- a/app/src/main/java/com/example/saranggujrati/ui/activity/BaseActicvity.kt	(revision 68b224f26154a07dbf15a6a310d612e5b5fc02ef)
+++ b/app/src/main/java/com/example/saranggujrati/ui/activity/BaseActicvity.kt	(date 1654004478204)
@@ -34,7 +34,7 @@
 
             //initialize view model
             /*viewModel= ViewModelProvider(this, ViewModelFactory(RetrofitBuilder.apiService))
-                .get(initializeViewModel())*/
+                .get(initiali   zeViewModel())*/
 
             viewModel = initializeViewModel()
         //}
Index: app/src/main/java/com/example/saranggujrati/ui/activity/LoginActivity.kt
IDEA additional info:
Subsystem: com.intellij.openapi.diff.impl.patch.BaseRevisionTextPatchEP
<+>package com.example.saranggujrati.ui.activity\r\n\r\nimport android.content.Intent\r\nimport android.os.Bundle\r\nimport android.util.Log\r\nimport android.util.Patterns\r\nimport android.view.View\r\nimport android.widget.EditText\r\nimport android.widget.ProgressBar\r\nimport android.widget.TextView\r\nimport android.widget.Toast\r\nimport androidx.coordinatorlayout.widget.CoordinatorLayout\r\nimport androidx.lifecycle.lifecycleScope\r\nimport com.example.saranggujrati.R\r\nimport com.example.saranggujrati.databinding.ActivityLoginBinding\r\nimport com.example.saranggujrati.ui.startNewActivity\r\nimport com.example.saranggujrati.ui.viewModel.LoginViewModel\r\nimport com.example.saranggujrati.webservice.Resource\r\nimport androidx.lifecycle.Observer\r\nimport com.example.saranggujrati.ui.SavedPrefrence\r\nimport com.example.saranggujrati.ui.isOnline\r\nimport com.example.saranggujrati.ui.visible\r\nimport com.facebook.*\r\nimport com.facebook.login.LoginResult\r\nimport com.google.android.gms.auth.api.signin.GoogleSignIn\r\nimport com.google.android.gms.auth.api.signin.GoogleSignInAccount\r\nimport com.google.android.gms.auth.api.signin.GoogleSignInClient\r\nimport com.google.android.gms.auth.api.signin.GoogleSignInOptions\r\nimport com.google.android.gms.common.api.ApiException\r\nimport com.google.android.gms.tasks.Task\r\nimport com.google.android.material.bottomsheet.BottomSheetDialog\r\nimport com.google.android.material.snackbar.Snackbar\r\nimport com.performly.ext.obtainViewModel\r\nimport kotlinx.coroutines.launch\r\nimport org.json.JSONException\r\nimport timber.log.Timber\r\nimport java.net.URL\r\nimport java.util.*\r\n\r\n\r\nclass LoginActivity : BaseActicvity<LoginViewModel>(), View.OnClickListener {\r\n\r\n    private lateinit var binding: ActivityLoginBinding\r\n    private lateinit var callbackManager: CallbackManager\r\n    private lateinit var googleSignInClient: GoogleSignInClient\r\n\r\n    companion object {\r\n        // Request code that will be used to verify if the result comes from correct activity\r\n        // Can be any integer\r\n        private const val RC_SIGN_IN = 9001\r\n    }\r\n\r\n\r\n    override fun getBaseLayoutView(): View? {\r\n        binding = ActivityLoginBinding.inflate(layoutInflater)\r\n        return binding.root\r\n    }\r\n\r\n    override fun initializeViewModel(): LoginViewModel {\r\n        return obtainViewModel(LoginViewModel::class.java)\r\n    }\r\n\r\n    override fun setUpChildUI(savedInstanceState: Bundle?) {\r\n        setupUI()\r\n    }\r\n\r\n\r\n    private fun setupUI() {\r\n\r\n        // [START config_signin]\r\n        // Configure Google Sign In\r\n        val gso = GoogleSignInOptions.Builder(GoogleSignInOptions.DEFAULT_SIGN_IN)\r\n            .requestIdToken(getString(R.string.client_id))\r\n            .requestEmail()\r\n            .build()\r\n\r\n        // [END config_signin]\r\n        // getting the value of gso inside the GoogleSigninClient\r\n        googleSignInClient = GoogleSignIn.getClient(this, gso)\r\n\r\n        // [START initialize_auth]\r\n        // Initialize Firebase Auth\r\n        // firebaseAuth= FirebaseAuth.getInstance()\r\n        // [END initialize_auth]\r\n\r\n\r\n        //facebook\r\n        FacebookSdk.sdkInitialize(this.applicationContext)\r\n        callbackManager = CallbackManager.Factory.create()\r\n\r\n        attachListeners()\r\n    }\r\n\r\n    private fun attachListeners() {\r\n        binding.llFacebook.setOnClickListener(this)\r\n        binding.loginButton.setOnClickListener(this)\r\n        binding.llGoogle.setOnClickListener(this)\r\n        binding.tvSignUp.setOnClickListener(this)\r\n        binding.tvSignIn.setOnClickListener(this)\r\n        binding.tvForgotPassword.setOnClickListener(this)\r\n        binding.tvGuest.setOnClickListener(this)\r\n\r\n    }\r\n\r\n\r\n    private fun facebookLogin() {\r\n        val permissionNeeds: List<String> = Arrays.asList(\"user_photos\", \"email\",\r\n            \"user_birthday\", \"public_profile\", \"AccessToken\")\r\n\r\n        binding.loginButton.registerCallback(callbackManager, object :\r\n            FacebookCallback<LoginResult> {\r\n\r\n            override fun onSuccess(loginResult: LoginResult?) {\r\n                System.out.println(\"onSuccess\");\r\n                val accessToken = loginResult?.getAccessToken()?.getToken()\r\n                if (accessToken != null) {\r\n                    Log.i(\"accessToken\", accessToken)\r\n                };\r\n                val request = GraphRequest.newMeRequest(\r\n                    loginResult?.accessToken\r\n                ) { fbObject, response ->\r\n                    Log.v(\"Login Success\", response.toString())\r\n\r\n\r\n                    //For safety measure enclose the request with try and catch\r\n                    try {\r\n\r\n                        Log.i(\"LoginActivity\", response.toString());\r\n\r\n                        val firstName = fbObject.getString(\"first_name\")\r\n                        val lastName = fbObject.getString(\"last_name\")\r\n                        val gender = fbObject.getString(\"gender\")\r\n                        val email = fbObject.getString(\"email\")\r\n                        val id = fbObject.getString(\"id\")\r\n                        val birthday = fbObject.getString(\"birthday\")\r\n                        val profile_pic =\r\n                            URL(\"http://graph.facebook.com/\" + id + \"/picture?type=large\");\r\n\r\n                        Log.i(\"FirstName\", \"onSuccess: firstName $firstName\")\r\n                        Log.i(\"LastName\", \"onSuccess: lastName $lastName\")\r\n                        Log.i(\"Gender\", \"onSuccess: gender $gender\")\r\n                        Log.i(\"Email\", \"onSuccess: email $email\")\r\n                        Log.i(\"id\", \"onSuccess: id $id\")\r\n                        Log.i(\"birthday\", \"onSuccess: birthday $birthday\")\r\n                        Log.i(\"profile_pic\", \"onSuccess: profile_pic $profile_pic\")\r\n\r\n\r\n                        viewModel.socialLogin(email,\r\n                            firstName + \" \" + lastName,\r\n                            profile_pic.toURI().toString(),\r\n                            \"\",\r\n                            \"\",\r\n                            \"FB\")\r\n                        setupObserversSocialLogin()\r\n\r\n                    } //If no data has been retrieve throw some error\r\n                    catch (e: JSONException) {\r\n                        e.printStackTrace();\r\n                    }\r\n\r\n                }\r\n                val bundle = Bundle()\r\n                bundle.putString(\"fields\",\r\n                    \"id, email, first_name, last_name, gender,age_range,birthday\")\r\n                //Set the bundle's data as Graph's object data\r\n                request.setParameters(bundle)\r\n\r\n                //Execute this Graph request asynchronously\r\n                request.executeAsync()\r\n            }\r\n\r\n            override fun onCancel() {\r\n                Log.i(\"onCancel\", \"onCancel: called\")\r\n            }\r\n\r\n            override fun onError(error: FacebookException?) {\r\n                Log.i(\"OnError\", \"onError: called\")\r\n            }\r\n        })\r\n    }\r\n\r\n\r\n    // [START Sign in]\r\n    private fun googleSignIn() {\r\n        val signInIntent: Intent = googleSignInClient.signInIntent\r\n        startActivityForResult(signInIntent, RC_SIGN_IN)\r\n    }\r\n\r\n    // [END Sign in]\r\n    // onActivityResult() function : this is where we provide the task and data for the Google Account\r\n    override fun onActivityResult(requestCode: Int, resultCode: Int, data: Intent?) {\r\n\r\n        if (requestCode == RC_SIGN_IN) {\r\n            val task = GoogleSignIn.getSignedInAccountFromIntent(data)\r\n            handleResult(task)\r\n        } else {\r\n            callbackManager.onActivityResult(requestCode, resultCode, data)\r\n\r\n        }\r\n\r\n        super.onActivityResult(requestCode, resultCode, data)\r\n\r\n    }\r\n\r\n    // handleResult() function -  this is where we update the UI after Google signin takes place\r\n    private fun handleResult(task: Task<GoogleSignInAccount>) {\r\n        try {\r\n            val account: GoogleSignInAccount? = task.getResult(ApiException::class.java)\r\n            Timber.d(\"firebaseAuthWithGoogle:%s\", account?.id)\r\n            if (account != null) {\r\n                Log.e(\"success\", account.toString())\r\n                updateUI(account)\r\n            }\r\n        } catch (e: ApiException) {\r\n\r\n            Toast.makeText(this, e.toString(), Toast.LENGTH_SHORT).show()\r\n            Timber.e(e)\r\n        }\r\n    }\r\n\r\n\r\n    // UpdateUI() function\r\n    private fun updateUI(account: GoogleSignInAccount) {\r\n        val email = account.email.toString()\r\n        val name = account.displayName.toString()\r\n        val image = account.photoUrl.toString()\r\n        val googleId = account.id.toString()\r\n\r\n\r\n        Log.e(\"email\", email)\r\n        Log.e(\"name\", name)\r\n        Log.e(\"googleId\", googleId)\r\n\r\n        viewModel.socialLogin(email, name, image, googleId, \"\", \"google\")\r\n        setupObserversSocialLogin()\r\n\r\n\r\n    }\r\n\r\n    private fun openSignUpDialogue() {\r\n// on below line we are creating a new bottom sheet dialog.\r\n        val dialog = BottomSheetDialog(this)\r\n\r\n        // on below line we are inflating a layout file which we have created.\r\n        val view = layoutInflater.inflate(R.layout.dialogue_signup, null)\r\n\r\n\r\n        val tvSignup1 = view.findViewById<TextView>(R.id.tvSignUpDialogue)\r\n        val layout = view.findViewById<CoordinatorLayout>(R.id.dialogLayout)\r\n        val tvSignIn = view.findViewById<TextView>(R.id.tvSignInDialogue)\r\n        val etEmail = view.findViewById<EditText>(R.id.etSignupEmail)\r\n        val etPassword = view.findViewById<EditText>(R.id.etSignupPassword)\r\n        val etName = view.findViewById<EditText>(R.id.etSignupName)\r\n        val etPhone = view.findViewById<EditText>(R.id.etSignupPhoneNumber)\r\n        val progressbar = view.findViewById<ProgressBar>(R.id.progressbar)\r\n\r\n        tvSignup1.setOnClickListener {\r\n            if (etName.text.toString().isEmpty()) {\r\n                Toast.makeText(this, resources.getString(R.string.v_name), Toast.LENGTH_SHORT)\r\n                    .show();\r\n\r\n            } else if (etName.text.toString().length < 4) {\r\n                Toast.makeText(this, resources.getString(R.string.v_valid_name), Toast.LENGTH_SHORT)\r\n                    .show();\r\n\r\n            } else if (etPhone.text.toString().isEmpty()) {\r\n                Toast.makeText(this, resources.getString(R.string.v_phone), Toast.LENGTH_SHORT)\r\n                    .show();\r\n\r\n            } else if (etPhone.text.toString().length < 10 || etPhone.text.toString().length > 10) {\r\n                Toast.makeText(this,\r\n                    resources.getString(R.string.v_valid_phone),\r\n                    Toast.LENGTH_SHORT).show();\r\n\r\n            } else if (etEmail.text.toString().isEmpty()) {\r\n                Toast.makeText(this, resources.getString(R.string.v_email), Toast.LENGTH_SHORT)\r\n                    .show();\r\n            } else if (!etEmail.text.toString()\r\n                    .isEmpty() && !Patterns.EMAIL_ADDRESS.matcher(etEmail.text.toString()).matches()\r\n            ) {\r\n                Toast.makeText(this,\r\n                    resources.getString(R.string.v_valid_email),\r\n                    Toast.LENGTH_SHORT).show();\r\n            } else if (etPassword.text.toString().isEmpty()) {\r\n                Toast.makeText(this, resources.getString(R.string.v_password), Toast.LENGTH_SHORT)\r\n                    .show();\r\n\r\n            } else if (etPassword.text.toString().length < 8) {\r\n                Toast.makeText(this,\r\n                    resources.getString(R.string.v_valid_password),\r\n                    Toast.LENGTH_SHORT).show();\r\n\r\n            } else {\r\n                viewModel.signUp(etEmail.text.toString(),\r\n                    etPassword.text.toString(),\r\n                    etPhone.text.toString(),\r\n                    etName.text.toString())\r\n                setupObserversSignUp(dialog, layout, progressbar)\r\n\r\n\r\n            }\r\n\r\n\r\n        }\r\n\r\n        tvSignIn.setOnClickListener {\r\n            dialog.dismiss()\r\n        }\r\n        // below line is use to set cancelable to avoid\r\n        // closing of dialog box when clicking on the screen.\r\n        dialog.setCancelable(true)\r\n\r\n        // on below line we are setting\r\n        // content view to our view.\r\n        dialog.setContentView(view)\r\n\r\n        // on below line we are calling\r\n        // a show method to display a dialog.\r\n        dialog.show()\r\n\r\n\r\n    }\r\n\r\n\r\n    private fun openForgotPasswordDialogue() {\r\n// on below line we are creating a new bottom sheet dialog.\r\n        val dialog = BottomSheetDialog(this)\r\n\r\n        // on below line we are inflating a layout file which we have created.\r\n        val view = layoutInflater.inflate(R.layout.dialogue_forgot_password, null)\r\n\r\n\r\n        val tvResetPassword = view.findViewById<TextView>(R.id.tvResetPassword)\r\n        val etPasswordEmail = view.findViewById<EditText>(R.id.etForgotPasswordEmail)\r\n        val layout = view.findViewById<CoordinatorLayout>(R.id.layout)\r\n        val progressbar = view.findViewById<ProgressBar>(R.id.progressbar)\r\n\r\n        tvResetPassword.setOnClickListener {\r\n            if (etPasswordEmail.text.toString().isEmpty()) {\r\n                Toast.makeText(this, resources.getString(R.string.v_email), Toast.LENGTH_SHORT)\r\n                    .show();\r\n\r\n            } else if (!etPasswordEmail.text.toString()\r\n                    .isEmpty() && !Patterns.EMAIL_ADDRESS.matcher(etPasswordEmail.text.toString())\r\n                    .matches()\r\n            ) {\r\n                Toast.makeText(this,\r\n                    resources.getString(R.string.v_valid_email),\r\n                    Toast.LENGTH_SHORT).show();\r\n            } else {\r\n                viewModel.forgotPassword(etPasswordEmail.text.toString())\r\n                setupObserversForgotPassword(dialog, layout, progressbar)\r\n                Toast.makeText(this,\r\n                    resources.getString(R.string.otp_send_success),\r\n                    Toast.LENGTH_SHORT).show();\r\n\r\n            }\r\n\r\n\r\n        }\r\n        // below line is use to set cancelable to avoid\r\n        // closing of dialog box when clicking on the screen.\r\n        dialog.setCancelable(true)\r\n\r\n        // on below line we are setting\r\n        // content view to our view.\r\n        dialog.setContentView(view)\r\n\r\n        // on below line we are calling\r\n        // a show method to display a dialog.\r\n        dialog.show()\r\n\r\n\r\n    }\r\n\r\n\r\n    private fun openverifyOtpDialogue() {\r\n// on below line we are creating a new bottom sheet dialog.\r\n        val dialog = BottomSheetDialog(this)\r\n\r\n        // on below line we are inflating a layout file which we have created.\r\n        val view = layoutInflater.inflate(R.layout.dialogue_verify_otp, null)\r\n\r\n\r\n        val etcode = view.findViewById<EditText>(R.id.etcode)\r\n        val tvResetPassword = view.findViewById<TextView>(R.id.tvVerifyOtp)\r\n        val layout = view.findViewById<CoordinatorLayout>(R.id.layout)\r\n        val progressbar = view.findViewById<ProgressBar>(R.id.progressbar)\r\n\r\n        tvResetPassword.setOnClickListener {\r\n            if (etcode.text.toString().isEmpty()) {\r\n                Toast.makeText(this, resources.getString(R.string.v_code), Toast.LENGTH_SHORT)\r\n                    .show();\r\n\r\n            } else {\r\n                if (etcode.text.toString() == SavedPrefrence.getOtp(applicationContext)) {\r\n                    Toast.makeText(this,\r\n                        resources.getString(R.string.otp_verified),\r\n                        Toast.LENGTH_SHORT).show();\r\n                    dialog.dismiss()\r\n                    openResetPasswordDialogue()\r\n                } else {\r\n                    Toast.makeText(this,\r\n                        resources.getString(R.string.v_valid_code),\r\n                        Toast.LENGTH_SHORT).show();\r\n                }\r\n            }\r\n\r\n\r\n        }\r\n        // below line is use to set cancelable to avoid\r\n        // closing of dialog box when clicking on the screen.\r\n        dialog.setCancelable(true)\r\n\r\n        // on below line we are setting\r\n        // content view to our view.\r\n        dialog.setContentView(view)\r\n\r\n        // on below line we are calling\r\n        // a show method to display a dialog.\r\n        dialog.show()\r\n\r\n\r\n    }\r\n\r\n\r\n    private fun openResetPasswordDialogue() {\r\n// on below line we are creating a new bottom sheet dialog.\r\n        val dialog = BottomSheetDialog(this)\r\n\r\n        // on below line we are inflating a layout file which we have created.\r\n        val view = layoutInflater.inflate(R.layout.dialogue_reset_password, null)\r\n\r\n\r\n        val tvResetPassword = view.findViewById<TextView>(R.id.tvResetPassword)\r\n        val layout = view.findViewById<CoordinatorLayout>(R.id.layout)\r\n        val password = view.findViewById<EditText>(R.id.etpassword)\r\n        val confirmPassword = view.findViewById<EditText>(R.id.etconfirmPassword)\r\n        val progressbar = view.findViewById<ProgressBar>(R.id.progressbar)\r\n\r\n        tvResetPassword.setOnClickListener {\r\n            if (password.text.toString().isEmpty()) {\r\n                Toast.makeText(this, resources.getString(R.string.v_password), Toast.LENGTH_SHORT)\r\n                    .show();\r\n\r\n            } else if (password.text.toString().length < 8) {\r\n                Toast.makeText(this,\r\n                    resources.getString(R.string.v_valid_password),\r\n                    Toast.LENGTH_SHORT).show();\r\n\r\n            } else if (confirmPassword.text.toString().isEmpty()) {\r\n                Toast.makeText(this,\r\n                    resources.getString(R.string.v_confirm_password),\r\n                    Toast.LENGTH_SHORT).show();\r\n\r\n            } else {\r\n\r\n                if (password.text.toString() == confirmPassword.text.toString()) {\r\n                    viewModel.resetPassword(SavedPrefrence.getUserId(applicationContext).toString(),\r\n                        SavedPrefrence.getOtp(applicationContext).toString(),\r\n                        SavedPrefrence.getEmail(applicationContext).toString(),\r\n                        password.text.toString(),\r\n                        confirmPassword.text.toString())\r\n                    setupObserversResetPassword(dialog, layout, progressbar)\r\n                } else {\r\n                    Toast.makeText(this,\r\n                        resources.getString(R.string.v_valid_password_match),\r\n                        Toast.LENGTH_SHORT).show();\r\n                }\r\n\r\n\r\n            }\r\n\r\n\r\n        }\r\n        // below line is use to set cancelable to avoid\r\n        // closing of dialog box when clicking on the screen.\r\n        dialog.setCancelable(true)\r\n\r\n        // on below line we are setting\r\n        // content view to our view.\r\n        dialog.setContentView(view)\r\n\r\n        // on below line we are calling\r\n        // a show method to display a dialog.\r\n        dialog.show()\r\n\r\n\r\n    }\r\n\r\n    private fun validate() {\r\n        if (binding.etEmail.text.toString().isEmpty()) {\r\n            Toast.makeText(this, resources.getString(R.string.v_email), Toast.LENGTH_SHORT).show();\r\n        } else if (!binding.etEmail.text.toString().isEmpty() && !Patterns.EMAIL_ADDRESS.matcher(\r\n                binding.etEmail.text.toString()).matches()\r\n        ) {\r\n            Toast.makeText(this, resources.getString(R.string.v_valid_email), Toast.LENGTH_SHORT)\r\n                .show();\r\n        } else if (binding.etPassword.text.toString().isEmpty()) {\r\n            Toast.makeText(this, resources.getString(R.string.v_password), Toast.LENGTH_SHORT)\r\n                .show();\r\n\r\n        } else {\r\n            viewModel.login(binding.etEmail.text.toString(), binding.etPassword.text.toString())\r\n            setupObserversLogin()\r\n\r\n\r\n        }\r\n\r\n    }\r\n\r\n\r\n    private fun clickOnGuest() {\r\n        SavedPrefrence.is_LOGIN = true\r\n        SavedPrefrence.setGuest(this,true)\r\n        startNewActivity(MainActivity::class.java)\r\n    }\r\n\r\n\r\n\r\n    //setup Observer\r\n\r\n    private fun setupObserversLogin() {\r\n\r\n        viewModel.loginResponse.observe(this, Observer {\r\n\r\n            when (it) {\r\n                is Resource.Loading -> {\r\n\r\n                    binding.progressbar.visible(true)\r\n                }\r\n                is Resource.Success -> {\r\n                    if (it.value.status) {\r\n                        binding.progressbar.visible(false)\r\n                        lifecycleScope.launch {\r\n                            SavedPrefrence.is_LOGIN = true\r\n                            SavedPrefrence.is_Guest = false\r\n\r\n                            SavedPrefrence.setUser(it.value.data, applicationContext)\r\n                            SavedPrefrence.setUserName(applicationContext, it.value.data.name)\r\n                            SavedPrefrence.setUserId(applicationContext, it.value.data.id.toString())\r\n                            SavedPrefrence.setEmail(applicationContext, it.value.data.email)\r\n                            SavedPrefrence.setApiToken(applicationContext, it.value.data.api_token)\r\n\r\n\r\n                            Snackbar.make(binding.tvSignUp, it.value.message, Snackbar.LENGTH_LONG)\r\n                                .show();\r\n\r\n                            startNewActivity(MainActivity::class.java)\r\n\r\n                        }\r\n\r\n                    }  else  {\r\n                        Snackbar.make(binding.tvSignUp, it.value.message, Snackbar.LENGTH_LONG)\r\n                            .show()\r\n                        binding.progressbar.visible(false)\r\n\r\n                    }\r\n\r\n                }\r\n                is Resource.Failure -> {\r\n                    binding.progressbar.visible(false)\r\n\r\n\r\n                    when {\r\n                        it.isNetworkError -> {\r\n                            if (!isOnline(applicationContext)) {\r\n                                Snackbar.make(binding.tvSignUp,\r\n                                    resources.getString(R.string.check_internet),\r\n                                    Snackbar.LENGTH_LONG).show()\r\n                            }\r\n                        }\r\n                        else -> {\r\n                            Snackbar.make(binding.tvSignUp, it.value.message, Snackbar.LENGTH_LONG)\r\n                                .show()\r\n\r\n                        }\r\n\r\n\r\n                    }\r\n\r\n\r\n                }\r\n            }\r\n        })\r\n\r\n    }\r\n\r\n    //signup\r\n    private fun setupObserversSignUp(\r\n        dialog: BottomSheetDialog,\r\n        view: View,\r\n        progressBar: ProgressBar,\r\n    ) {\r\n\r\n        viewModel.signUpResponse.observe(this, Observer {\r\n\r\n            when (it) {\r\n                is Resource.Loading -> {\r\n                    Log.e(\"Progress\", \"true\")\r\n                    progressBar.visible(true)\r\n                }\r\n                is Resource.Success -> {\r\n                    if (it.value.status) {\r\n                        progressBar.visible(false)\r\n                        lifecycleScope.launch {\r\n\r\n                            SavedPrefrence.is_LOGIN = true\r\n                            SavedPrefrence.is_Guest = false\r\n\r\n                            SavedPrefrence.setUser(it.value.data, applicationContext)\r\n                            SavedPrefrence.setUserName(applicationContext, it.value.data.name)\r\n                            SavedPrefrence.setUserId(applicationContext, it.value.data.id.toString())\r\n                            SavedPrefrence.setEmail(applicationContext, it.value.data.email)\r\n                            SavedPrefrence.setApiToken(applicationContext, it.value.data.api_token)\r\n                            Snackbar.make(view, it.value.message, Snackbar.LENGTH_LONG).show()\r\n                            dialog.dismiss()\r\n                            startNewActivity(MainActivity::class.java)\r\n\r\n\r\n                        }\r\n\r\n                    } else  {\r\n                        Snackbar.make(binding.tvSignUp, it.value.message, Snackbar.LENGTH_LONG)\r\n                            .show()\r\n                        binding.progressbar.visible(false)\r\n\r\n                    }\r\n\r\n                }\r\n                is Resource.Failure -> {\r\n                    progressBar.visible(false)\r\n\r\n                    when {\r\n                        it.isNetworkError -> {\r\n                            if (!isOnline(applicationContext)) {\r\n                                Snackbar.make(view,\r\n                                    resources.getString(R.string.check_internet),\r\n                                    Snackbar.LENGTH_LONG).show()\r\n                            }\r\n                        }\r\n                        else -> {\r\n                            Snackbar.make(view, it.value.message, Snackbar.LENGTH_LONG).show()\r\n\r\n                        }\r\n\r\n\r\n                    }\r\n\r\n                }\r\n\r\n\r\n            }\r\n        })\r\n\r\n    }\r\n\r\n\r\n    //Forgot Password\r\n    private fun setupObserversForgotPassword(\r\n        dialog: BottomSheetDialog,\r\n        view: View,\r\n        progressBar: ProgressBar,\r\n    ) {\r\n\r\n        viewModel.forgotPasswordResponse.observe(this, Observer {\r\n\r\n            when (it) {\r\n                is Resource.Loading -> {\r\n                    progressBar.visible(true)\r\n                }\r\n                is Resource.Success -> {\r\n                    if (it.value.status) {\r\n                        progressBar.visible(false)\r\n                        lifecycleScope.launch {\r\n\r\n                            dialog.dismiss()\r\n                            Snackbar.make(view, it.value.message, Snackbar.LENGTH_LONG).show()\r\n                            SavedPrefrence.setOtp(applicationContext, it.value.data.otp.toString())\r\n                            openverifyOtpDialogue()\r\n\r\n\r\n                        }\r\n\r\n                    } else  {\r\n                        Snackbar.make(binding.tvSignUp, it.value.message, Snackbar.LENGTH_LONG)\r\n                            .show()\r\n                        binding.progressbar.visible(false)\r\n\r\n                    }\r\n\r\n                }\r\n                is Resource.Failure -> {\r\n                    progressBar.visible(false)\r\n\r\n                    when {\r\n                        it.isNetworkError -> {\r\n                            if (!isOnline(applicationContext)) {\r\n                                Snackbar.make(view,\r\n                                    resources.getString(R.string.check_internet),\r\n                                    Snackbar.LENGTH_LONG).show()\r\n                            }\r\n                        }\r\n                        else -> {\r\n                            Snackbar.make(view, it.value.message, Snackbar.LENGTH_LONG).show()\r\n\r\n                        }\r\n\r\n\r\n                    }\r\n\r\n                }\r\n\r\n\r\n            }\r\n        })\r\n\r\n    }\r\n\r\n\r\n    //Reset Password\r\n    private fun setupObserversResetPassword(\r\n        dialog: BottomSheetDialog,\r\n        view: View,\r\n        progressBar: ProgressBar,\r\n    ) {\r\n\r\n        viewModel.resetPasswordResponse.observe(this, Observer {\r\n\r\n            when (it) {\r\n                is Resource.Loading -> {\r\n                    progressBar.visible(true)\r\n                }\r\n                is Resource.Success -> {\r\n                    if (it.value.status) {\r\n                        progressBar.visible(false)\r\n                        lifecycleScope.launch {\r\n\r\n                            Snackbar.make(view, it.value.message, Snackbar.LENGTH_LONG).show()\r\n                            dialog.dismiss()\r\n\r\n\r\n                        }\r\n\r\n                    } else  {\r\n                        Snackbar.make(binding.tvSignUp, it.value.message, Snackbar.LENGTH_LONG)\r\n                            .show()\r\n                        binding.progressbar.visible(false)\r\n\r\n                    }\r\n\r\n                }\r\n                is Resource.Failure -> {\r\n                    progressBar.visible(false)\r\n\r\n                    when {\r\n                        it.isNetworkError -> {\r\n                            if (!isOnline(applicationContext)) {\r\n                                Snackbar.make(view,\r\n                                    resources.getString(R.string.check_internet),\r\n                                    Snackbar.LENGTH_LONG).show()\r\n                            }\r\n                        }\r\n                        else -> {\r\n                            Snackbar.make(view, it.value.message, Snackbar.LENGTH_LONG).show()\r\n\r\n                        }\r\n\r\n\r\n                    }\r\n\r\n                }\r\n\r\n\r\n            }\r\n        })\r\n\r\n    }\r\n//Social Login\r\n\r\n\r\n    private fun setupObserversSocialLogin() {\r\n\r\n        viewModel.socialLoginResponse.observe(this, Observer {\r\n\r\n            when (it) {\r\n                is Resource.Loading -> {\r\n                    binding.progressbar.visible(true)\r\n                }\r\n                is Resource.Success -> {\r\n                    if (it.value.status) {\r\n                        binding.progressbar.visible(false)\r\n                        lifecycleScope.launch {\r\n\r\n\r\n                            SavedPrefrence.is_LOGIN=true\r\n                            SavedPrefrence.is_Guest = false\r\n\r\n\r\n                            SavedPrefrence.setUser(it.value.data, applicationContext)\r\n                            SavedPrefrence.setUserName(applicationContext, it.value.data.name)\r\n                            SavedPrefrence.setUserId(applicationContext, it.value.data.id.toString())\r\n                            SavedPrefrence.setEmail(applicationContext, it.value.data.email)\r\n                            SavedPrefrence.setApiToken(applicationContext, it.value.data.api_token)\r\n\r\n\r\n                            Snackbar.make(binding.tvSignUp, it.value.message, Snackbar.LENGTH_SHORT)\r\n                                .show();\r\n\r\n                            startNewActivity(MainActivity::class.java)\r\n                        }\r\n\r\n                    } else  {\r\n                        Snackbar.make(binding.tvSignUp, it.value.message, Snackbar.LENGTH_LONG)\r\n                            .show()\r\n                        binding.progressbar.visible(false)\r\n\r\n                    }\r\n\r\n                }\r\n                is Resource.Failure -> {\r\n                    binding.progressbar.visible(false)\r\n\r\n                    when {\r\n                        it.isNetworkError -> {\r\n                            if (!isOnline(applicationContext)) {\r\n                                Snackbar.make(binding.tvSignUp,\r\n                                    resources.getString(R.string.check_internet),\r\n                                    Snackbar.LENGTH_LONG).show()\r\n                            }\r\n                        }\r\n                        else -> {\r\n                            Snackbar.make(binding.tvSignUp, it.value.message, Snackbar.LENGTH_LONG)\r\n                                .show()\r\n\r\n                        }\r\n\r\n\r\n                    }\r\n\r\n\r\n                }\r\n            }\r\n        })\r\n\r\n    }\r\n\r\n\r\n\r\n    override fun onClick(p0: View?) {\r\n        when (p0) {\r\n            binding.loginButton -> facebookLogin()\r\n            binding.llFacebook -> binding.loginButton.performClick()\r\n            binding.llGoogle -> googleSignIn()\r\n            binding.tvGuest -> clickOnGuest()\r\n            binding.tvSignIn -> validate()\r\n            binding.tvSignUp -> openSignUpDialogue()\r\n            binding.tvForgotPassword -> openForgotPasswordDialogue()\r\n\r\n        }\r\n\r\n    }\r\n}
Subsystem: com.intellij.openapi.diff.impl.patch.CharsetEP
<+>UTF-8
===================================================================
diff --git a/app/src/main/java/com/example/saranggujrati/ui/activity/LoginActivity.kt b/app/src/main/java/com/example/saranggujrati/ui/activity/LoginActivity.kt
--- a/app/src/main/java/com/example/saranggujrati/ui/activity/LoginActivity.kt	(revision 68b224f26154a07dbf15a6a310d612e5b5fc02ef)
+++ b/app/src/main/java/com/example/saranggujrati/ui/activity/LoginActivity.kt	(date 1654149922463)
@@ -561,7 +561,6 @@
                 is Resource.Failure -> {
                     binding.progressbar.visible(false)
 
-
                     when {
                         it.isNetworkError -> {
                             if (!isOnline(applicationContext)) {
